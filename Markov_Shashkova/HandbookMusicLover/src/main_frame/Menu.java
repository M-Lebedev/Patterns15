/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package main_frame;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import main_сlasses.MusicIndustryWorker;
import main_сlasses.MusicalRecording;


/**
 *
 * @author константин
 */
public class Menu extends javax.swing.JFrame {

/**
 * Creates new form Menu
 */
public Menu() {
     this.music=new ArrayList<>();
       this.readArrayArrayListMusicalRecording(music);//загрузка данных
       this.people=new ArrayList<>();
       this. creationArrayListPeople(people,music);//составление списка всех людей
    initComponents();
    this.getContentPane().setBackground(Color.WHITE);
}

/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonBack = new javax.swing.JButton();
        jButtonListPopularMusic = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();
        jLabelEditor = new javax.swing.JLabel();
        jLabelReference = new javax.swing.JLabel();
        jLabelreview = new javax.swing.JLabel();
        jButtonReference = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jButtonChange = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonListSingers = new javax.swing.JButton();
        jButtonListComposers = new javax.swing.JButton();
        jButtonListMusicalRecordings = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("main_frame/Bundle"); // NOI18N
        setTitle(bundle.getString("Menu.title")); // NOI18N
        setBackground(new java.awt.Color(255, 255, 255));
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setMinimumSize(new java.awt.Dimension(1000, 700));
        setResizable(false);
        addWindowListener(formListener);
        getContentPane().setLayout(null);

        jButtonBack.setBackground(new java.awt.Color(255, 255, 255));
        jButtonBack.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jButtonBack.setText(bundle.getString("Menu.text")); // NOI18N
        jButtonBack.setToolTipText(bundle.getString("Menu.toolTipText")); // NOI18N
        jButtonBack.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
        jButtonBack.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonBack.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonBack.setDoubleBuffered(true);
        jButtonBack.setFocusable(false);
        jButtonBack.setName(""); // NOI18N
        jButtonBack.setRolloverEnabled(false);
        jButtonBack.addMouseListener(formListener);
        jButtonBack.addActionListener(formListener);
        getContentPane().add(jButtonBack);
        jButtonBack.setBounds(250, 240, 70, 63);

        jButtonListPopularMusic.setBackground(new java.awt.Color(255, 255, 255));
        jButtonListPopularMusic.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButtonListPopularMusic.setText(bundle.getString("Menu.jButtonListPopularMusic.text")); // NOI18N
        jButtonListPopularMusic.setToolTipText(bundle.getString("Menu.jButtonListPopularMusic.toolTipText")); // NOI18N
        jButtonListPopularMusic.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(102, 102, 102)));
        jButtonListPopularMusic.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonListPopularMusic.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonListPopularMusic.setFocusable(false);
        jButtonListPopularMusic.setName("exit"); // NOI18N
        jButtonListPopularMusic.setRolloverEnabled(false);
        jButtonListPopularMusic.addMouseListener(formListener);
        jButtonListPopularMusic.addActionListener(formListener);
        getContentPane().add(jButtonListPopularMusic);
        jButtonListPopularMusic.setBounds(370, 380, 320, 60);

        jButtonNext.setBackground(new java.awt.Color(255, 255, 255));
        jButtonNext.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jButtonNext.setText(bundle.getString("Menu.jButtonNext.text")); // NOI18N
        jButtonNext.setToolTipText(bundle.getString("Menu.jButtonNext.toolTipText")); // NOI18N
        jButtonNext.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
        jButtonNext.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonNext.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonNext.setDoubleBuffered(true);
        jButtonNext.setFocusable(false);
        jButtonNext.setName(""); // NOI18N
        jButtonNext.setRolloverEnabled(false);
        jButtonNext.addMouseListener(formListener);
        jButtonNext.addActionListener(formListener);
        getContentPane().add(jButtonNext);
        jButtonNext.setBounds(670, 240, 70, 63);

        jLabelEditor.setBackground(new java.awt.Color(255, 255, 255));
        jLabelEditor.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabelEditor.setText(bundle.getString("Menu.jLabelEditor.text")); // NOI18N
        jLabelEditor.setOpaque(true);
        getContentPane().add(jLabelEditor);
        jLabelEditor.setBounds(380, 110, 200, 56);

        jLabelReference.setBackground(new java.awt.Color(255, 255, 255));
        jLabelReference.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabelReference.setText(bundle.getString("Menu.jLabelReference.text")); // NOI18N
        jLabelReference.setOpaque(true);
        getContentPane().add(jLabelReference);
        jLabelReference.setBounds(640, 80, 192, 56);

        jLabelreview.setBackground(new java.awt.Color(255, 255, 255));
        jLabelreview.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabelreview.setText(bundle.getString("Menu.jLabelreview.text")); // NOI18N
        jLabelreview.setOpaque(true);
        getContentPane().add(jLabelreview);
        jLabelreview.setBounds(380, 170, 216, 56);

        jButtonReference.setBackground(new java.awt.Color(255, 255, 255));
        jButtonReference.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButtonReference.setText(bundle.getString("Menu.jButtonReference.text")); // NOI18N
        jButtonReference.setToolTipText(bundle.getString("Menu.jButtonReference.toolTipText")); // NOI18N
        jButtonReference.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(102, 102, 102)));
        jButtonReference.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonReference.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonReference.setFocusable(false);
        jButtonReference.setName("exit"); // NOI18N
        jButtonReference.setRolloverEnabled(false);
        jButtonReference.addMouseListener(formListener);
        jButtonReference.addActionListener(formListener);
        getContentPane().add(jButtonReference);
        jButtonReference.setBounds(0, 440, 320, 60);

        jButtonAdd.setBackground(new java.awt.Color(255, 255, 255));
        jButtonAdd.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButtonAdd.setText(bundle.getString("Menu.jButtonAdd.text")); // NOI18N
        jButtonAdd.setToolTipText(bundle.getString("Menu.jButtonAdd.toolTipText")); // NOI18N
        jButtonAdd.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(102, 102, 102)));
        jButtonAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonAdd.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonAdd.setFocusable(false);
        jButtonAdd.setName("exit"); // NOI18N
        jButtonAdd.setRolloverEnabled(false);
        jButtonAdd.addMouseListener(formListener);
        jButtonAdd.addActionListener(formListener);
        getContentPane().add(jButtonAdd);
        jButtonAdd.setBounds(690, 590, 320, 60);

        jButtonExit.setBackground(new java.awt.Color(255, 255, 255));
        jButtonExit.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButtonExit.setText(bundle.getString("Menu.jButtonExit.text")); // NOI18N
        jButtonExit.setToolTipText(bundle.getString("Menu.jButtonExit.toolTipText")); // NOI18N
        jButtonExit.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(102, 102, 102)));
        jButtonExit.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonExit.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonExit.setFocusable(false);
        jButtonExit.setName("exit"); // NOI18N
        jButtonExit.setRolloverEnabled(false);
        jButtonExit.addMouseListener(formListener);
        jButtonExit.addActionListener(formListener);
        getContentPane().add(jButtonExit);
        jButtonExit.setBounds(340, 550, 320, 60);

        jButtonChange.setBackground(new java.awt.Color(255, 255, 255));
        jButtonChange.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButtonChange.setText(bundle.getString("Menu.jButtonChange.text")); // NOI18N
        jButtonChange.setToolTipText(bundle.getString("Menu.jButtonChange.toolTipText")); // NOI18N
        jButtonChange.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
        jButtonChange.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonChange.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonChange.setFocusable(false);
        jButtonChange.setName("exit"); // NOI18N
        jButtonChange.setRolloverEnabled(false);
        jButtonChange.addMouseListener(formListener);
        jButtonChange.addActionListener(formListener);
        getContentPane().add(jButtonChange);
        jButtonChange.setBounds(10, 350, 320, 60);

        jButtonDelete.setBackground(new java.awt.Color(255, 255, 255));
        jButtonDelete.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButtonDelete.setText(bundle.getString("Menu.jButtonDelete.text")); // NOI18N
        jButtonDelete.setToolTipText(bundle.getString("Menu.jButtonDelete.toolTipText")); // NOI18N
        jButtonDelete.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(102, 102, 102)));
        jButtonDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonDelete.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonDelete.setFocusable(false);
        jButtonDelete.setName("exit"); // NOI18N
        jButtonDelete.setRolloverEnabled(false);
        jButtonDelete.addMouseListener(formListener);
        jButtonDelete.addActionListener(formListener);
        getContentPane().add(jButtonDelete);
        jButtonDelete.setBounds(360, 460, 320, 60);

        jButtonListSingers.setBackground(new java.awt.Color(255, 255, 255));
        jButtonListSingers.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButtonListSingers.setText(bundle.getString("Menu.jButtonListSingers.text")); // NOI18N
        jButtonListSingers.setToolTipText(bundle.getString("Menu.jButtonListSingers.toolTipText")); // NOI18N
        jButtonListSingers.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(102, 102, 102)));
        jButtonListSingers.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonListSingers.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonListSingers.setFocusable(false);
        jButtonListSingers.setName("exit"); // NOI18N
        jButtonListSingers.setRolloverEnabled(false);
        jButtonListSingers.addMouseListener(formListener);
        jButtonListSingers.addActionListener(formListener);
        getContentPane().add(jButtonListSingers);
        jButtonListSingers.setBounds(20, 530, 320, 60);

        jButtonListComposers.setBackground(new java.awt.Color(255, 255, 255));
        jButtonListComposers.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButtonListComposers.setText(bundle.getString("Menu.jButtonListComposers.text")); // NOI18N
        jButtonListComposers.setToolTipText(bundle.getString("Menu.jButtonListComposers.toolTipText")); // NOI18N
        jButtonListComposers.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(102, 102, 102)));
        jButtonListComposers.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonListComposers.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonListComposers.setFocusable(false);
        jButtonListComposers.setName("exit"); // NOI18N
        jButtonListComposers.setRolloverEnabled(false);
        jButtonListComposers.addMouseListener(formListener);
        jButtonListComposers.addActionListener(formListener);
        getContentPane().add(jButtonListComposers);
        jButtonListComposers.setBounds(720, 520, 320, 60);

        jButtonListMusicalRecordings.setBackground(new java.awt.Color(255, 255, 255));
        jButtonListMusicalRecordings.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButtonListMusicalRecordings.setText(bundle.getString("Menu.jButtonListMusicalRecordings.text")); // NOI18N
        jButtonListMusicalRecordings.setToolTipText(bundle.getString("Menu.jButtonListMusicalRecordings.toolTipText")); // NOI18N
        jButtonListMusicalRecordings.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(102, 102, 102)));
        jButtonListMusicalRecordings.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonListMusicalRecordings.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jButtonListMusicalRecordings.setFocusable(false);
        jButtonListMusicalRecordings.setName("exit"); // NOI18N
        jButtonListMusicalRecordings.setRolloverEnabled(false);
        jButtonListMusicalRecordings.addMouseListener(formListener);
        jButtonListMusicalRecordings.addActionListener(formListener);
        getContentPane().add(jButtonListMusicalRecordings);
        jButtonListMusicalRecordings.setBounds(680, 400, 320, 60);

        pack();
        setLocationRelativeTo(null);
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.MouseListener, java.awt.event.WindowListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == jButtonBack) {
                Menu.this.jButtonBackActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonListPopularMusic) {
                Menu.this.jButtonListPopularMusicActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonNext) {
                Menu.this.jButtonNextActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonReference) {
                Menu.this.jButtonReferenceActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonAdd) {
                Menu.this.jButtonAddActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonExit) {
                Menu.this.jButtonExitActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonChange) {
                Menu.this.jButtonChangeActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonDelete) {
                Menu.this.jButtonDeleteActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonListSingers) {
                Menu.this.jButtonListSingersActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonListComposers) {
                Menu.this.jButtonListComposersActionPerformed(evt);
            }
            else if (evt.getSource() == jButtonListMusicalRecordings) {
                Menu.this.jButtonListMusicalRecordingsActionPerformed(evt);
            }
        }

        public void mouseClicked(java.awt.event.MouseEvent evt) {
        }

        public void mouseEntered(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == jButtonBack) {
                Menu.this.jButtonBackMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonListPopularMusic) {
                Menu.this.jButtonListPopularMusicMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonNext) {
                Menu.this.jButtonNextMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonReference) {
                Menu.this.jButtonReferenceMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonAdd) {
                Menu.this.jButtonAddMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonExit) {
                Menu.this.jButtonExitMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonChange) {
                Menu.this.jButtonChangeMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonDelete) {
                Menu.this.jButtonDeleteMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonListSingers) {
                Menu.this.jButtonListSingersMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonListComposers) {
                Menu.this.jButtonListComposersMouseEntered(evt);
            }
            else if (evt.getSource() == jButtonListMusicalRecordings) {
                Menu.this.jButtonListMusicalRecordingsMouseEntered(evt);
            }
        }

        public void mouseExited(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == jButtonBack) {
                Menu.this.jButtonBackMouseExited(evt);
            }
            else if (evt.getSource() == jButtonListPopularMusic) {
                Menu.this.jButtonListPopularMusicMouseExited(evt);
            }
            else if (evt.getSource() == jButtonNext) {
                Menu.this.jButtonNextMouseExited(evt);
            }
            else if (evt.getSource() == jButtonReference) {
                Menu.this.jButtonReferenceMouseExited(evt);
            }
            else if (evt.getSource() == jButtonAdd) {
                Menu.this.jButtonAddMouseExited(evt);
            }
            else if (evt.getSource() == jButtonExit) {
                Menu.this.jButtonExitMouseExited(evt);
            }
            else if (evt.getSource() == jButtonChange) {
                Menu.this.jButtonChangeMouseExited(evt);
            }
            else if (evt.getSource() == jButtonDelete) {
                Menu.this.jButtonDeleteMouseExited(evt);
            }
            else if (evt.getSource() == jButtonListSingers) {
                Menu.this.jButtonListSingersMouseExited(evt);
            }
            else if (evt.getSource() == jButtonListComposers) {
                Menu.this.jButtonListComposersMouseExited(evt);
            }
            else if (evt.getSource() == jButtonListMusicalRecordings) {
                Menu.this.jButtonListMusicalRecordingsMouseExited(evt);
            }
        }

        public void mousePressed(java.awt.event.MouseEvent evt) {
        }

        public void mouseReleased(java.awt.event.MouseEvent evt) {
        }

        public void windowActivated(java.awt.event.WindowEvent evt) {
        }

        public void windowClosed(java.awt.event.WindowEvent evt) {
        }

        public void windowClosing(java.awt.event.WindowEvent evt) {
            if (evt.getSource() == Menu.this) {
                Menu.this.formWindowClosing(evt);
            }
        }

        public void windowDeactivated(java.awt.event.WindowEvent evt) {
        }

        public void windowDeiconified(java.awt.event.WindowEvent evt) {
        }

        public void windowIconified(java.awt.event.WindowEvent evt) {
        }

        public void windowOpened(java.awt.event.WindowEvent evt) {
            if (evt.getSource() == Menu.this) {
                Menu.this.formWindowOpened(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    
        picture=Toolkit.getDefaultToolkit().getImage("program/122.jpg");
        Image icon=Toolkit.getDefaultToolkit().getImage("program/133.jpg");
        this.setIconImage(icon);
        this.indexMenuNew=0;
        this.indexMenuOld=0;
        this.menuLabel();
        this.menuButton();
        this.repaint();
    }//GEN-LAST:event_formWindowOpened

    private void jButtonBackMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonBackMouseExited
        // TODO add your handling code here:
       jButtonBack.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
     
    }//GEN-LAST:event_jButtonBackMouseExited

    private void jButtonBackMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonBackMouseEntered
        // TODO add your handling code here
       jButtonBack.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
  
    }//GEN-LAST:event_jButtonBackMouseEntered

    private void jButtonListPopularMusicMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListPopularMusicMouseEntered
        // TODO add your handling code here:
         this.jButtonListPopularMusic.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
     
        
    }//GEN-LAST:event_jButtonListPopularMusicMouseEntered

    private void jButtonListPopularMusicMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListPopularMusicMouseExited
        // TODO add your handling code here:
        jButtonListPopularMusic.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));

    }//GEN-LAST:event_jButtonListPopularMusicMouseExited

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        // TODO add your handling code here:
        this.indexMenuOld=this.indexMenuNew;
        this.indexMenuNew--;
        if(this.indexMenuNew<0)
            this.indexMenuNew=this.menuLabel.size()-1;
        this.showMenuLabel();
        this.showMenuButton();
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jButtonNextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNextMouseEntered
        // TODO add your handling code here:
        jButtonNext.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonNextMouseEntered

    private void jButtonNextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNextMouseExited
        // TODO add your handling code here:
        jButtonNext.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonNextMouseExited

    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
        // TODO add your handling code here:
        this.indexMenuOld=this.indexMenuNew;
        this.indexMenuNew++;
        if(this.indexMenuNew==this.menuLabel.size())
            this.indexMenuNew=0;
        this.showMenuLabel();
        this.showMenuButton();
    }//GEN-LAST:event_jButtonNextActionPerformed

    private void jButtonReferenceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonReferenceMouseEntered
        // TODO add your handling code here:
         this.jButtonReference.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonReferenceMouseEntered

    private void jButtonReferenceMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonReferenceMouseExited
        // TODO add your handling code here:
         jButtonReference.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonReferenceMouseExited

    private void jButtonAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddMouseEntered
        // TODO add your handling code here:
       jButtonAdd.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonAddMouseEntered

    private void jButtonAddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddMouseExited
        // TODO add your handling code here:
        jButtonAdd.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
    }//GEN-LAST:event_jButtonAddMouseExited

    private void jButtonExitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonExitMouseEntered
        // TODO add your handling code here:
        jButtonExit.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonExitMouseEntered

    private void jButtonExitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonExitMouseExited
        // TODO add your handling code here:
        jButtonExit.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
    
    }//GEN-LAST:event_jButtonExitMouseExited

    private void jButtonChangeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonChangeMouseEntered
        // TODO add your handling code here:
         this.jButtonChange.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));

    }//GEN-LAST:event_jButtonChangeMouseEntered

    private void jButtonChangeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonChangeMouseExited
        // TODO add your handling code here:
        jButtonChange.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
      
    }//GEN-LAST:event_jButtonChangeMouseExited

    private void jButtonDeleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDeleteMouseEntered
        // TODO add your handling code here:
        jButtonDelete.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
    }//GEN-LAST:event_jButtonDeleteMouseEntered

    private void jButtonDeleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDeleteMouseExited
        // TODO add your handling code here:
        jButtonDelete.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
   
    }//GEN-LAST:event_jButtonDeleteMouseExited

    private void jButtonListSingersMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListSingersMouseEntered
        // TODO add your handling code here:
        this.jButtonListSingers.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
     
    }//GEN-LAST:event_jButtonListSingersMouseEntered

    private void jButtonListSingersMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListSingersMouseExited
        // TODO add your handling code here:
        jButtonListSingers.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
     
    }//GEN-LAST:event_jButtonListSingersMouseExited

    private void jButtonListComposersMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListComposersMouseEntered
        // TODO add your handling code here:
         this.jButtonListComposers.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
  
    }//GEN-LAST:event_jButtonListComposersMouseEntered

    private void jButtonListComposersMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListComposersMouseExited
        // TODO add your handling code here:
        jButtonListComposers.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
     
    }//GEN-LAST:event_jButtonListComposersMouseExited

    private void jButtonListMusicalRecordingsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListMusicalRecordingsMouseEntered
        // TODO add your handling code here:
        this.jButtonListMusicalRecordings.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 255), new java.awt.Color(0, 0, 255)));
 
    }//GEN-LAST:event_jButtonListMusicalRecordingsMouseEntered

    private void jButtonListMusicalRecordingsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonListMusicalRecordingsMouseExited
        // TODO add your handling code here:
        jButtonListMusicalRecordings.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 51, 51), new java.awt.Color(51, 51, 51)));
 
    }//GEN-LAST:event_jButtonListMusicalRecordingsMouseExited

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        // TODO add your handling code here:
           writeArrayArrayListMusicalRecording(music);
           System.exit(0);
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
          writeArrayArrayListMusicalRecording(music); 
    }//GEN-LAST:event_formWindowClosing

    private void jButtonReferenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReferenceActionPerformed
        // TODO add your handling code here:
        Reference a=new Reference(this,true);
        a.setVisible(true);
    }//GEN-LAST:event_jButtonReferenceActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        // TODO add your handling code here:
        MusicalRecording music=new MusicalRecording();
      new JDialogAdd(this,true,music,this.people).setVisible(true);
      if(music.equalsMusicalRecording(new MusicalRecording())==false)
          this.music.add(music);
      
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonChangeActionPerformed
        // TODO add your handling code here:
      new JDialogСhange(this,true,this.music,this.people).setVisible(true);
    }//GEN-LAST:event_jButtonChangeActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
        new JDialogDelete(this,true,this.music).setVisible(true);
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonListSingersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListSingersActionPerformed
        // TODO add your handling code here:
        new JDialogListSingers(this,true,this.music).setVisible(true);
    }//GEN-LAST:event_jButtonListSingersActionPerformed

    private void jButtonListComposersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListComposersActionPerformed
        // TODO add your handling code here:
        new JDialogListComposers(this,true,this.music).setVisible(true);
    }//GEN-LAST:event_jButtonListComposersActionPerformed

    private void jButtonListPopularMusicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListPopularMusicActionPerformed
        // TODO add your handling code here:
        new JDialogPopularMusic(this,true,this.music).setVisible(true);
    }//GEN-LAST:event_jButtonListPopularMusicActionPerformed

    private void jButtonListMusicalRecordingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListMusicalRecordingsActionPerformed
        // TODO add your handling code here:
        new JDialogMusicalRecording(this,true,this.music).setVisible(true);
    }//GEN-LAST:event_jButtonListMusicalRecordingsActionPerformed


@Override
public void paint(Graphics g)
{
  g.drawImage(picture, 0, 25, this);
    this.print_1();   
}
protected void showMenuButton()
{
     for(JButton v:this.menuButton.get(this.indexMenuOld))
     {
          v.setVisible(false);
         v.setEnabled(false);
     }
     for(JButton v:this.menuButton.get(this.indexMenuNew))
     {
          v.setVisible(true);
         v.setEnabled(true); 
     }
}
protected void showMenuLabel()
{
    menuLabel.get(this.indexMenuOld).setVisible(false);
     menuLabel.get(this.indexMenuOld).setEnabled(false);
     menuLabel.get(this.indexMenuNew).setVisible(true);
    menuLabel.get(this.indexMenuNew).setEnabled(true);
}
protected void menuLabel()
{
     this.pointMunuLabel=new Point(400,242);
     
     this.menuLabel=new ArrayList<>();
     menuLabel.add(jLabelEditor);
     menuLabel.add(jLabelreview);
     menuLabel.add(jLabelReference);
    
     this.jLabelEditor.setLocation(pointMunuLabel);
     for(int i=1;i<menuLabel.size();i++)
     {
        menuLabel.get(i).setEnabled(false);
         menuLabel.get(i).setVisible(false);
         menuLabel.get(i).setLocation(pointMunuLabel);
     }
}
protected void menuButton()
{
    int x=340,y=330;
    this.pointMunuButton=new Point(340,330);
    this.menuButton=new ArrayList<>();
    ArrayList<JButton> a;
    a=new ArrayList<>();
    a.add(this.jButtonAdd);
    a.add(this.jButtonChange);
    a.add(this.jButtonDelete);
    this.menuButton.add(a);
    a=new ArrayList<>();
    a.add(this.jButtonListSingers);
    a.add(this.jButtonListMusicalRecordings);
    a.add(this.jButtonListComposers);
    a.add(this.jButtonListPopularMusic);
    this.menuButton.add(a);
    a=new ArrayList<>();
    a.add(this.jButtonReference);
    a.add(this.jButtonExit);
    this.menuButton.add(a);
    for( ArrayList<JButton> v:this.menuButton)
    {
        y=330;
        this.pointMunuButton.setLocation(x, y);
        for(int i=0;i<v.size();i++)
        {
            v.get(i).setLocation(pointMunuButton);
            y=y+v.get(i).getHeight()+15;
           this.pointMunuButton.setLocation(x, y);
        }
    }
    for(int i=1;i<this.menuButton.size();i++)
    {
        for(JButton v:this.menuButton.get(i))
        {
            v.setEnabled(false);
            v.setVisible(false); 
        }
    }
}
@Override
public void update(Graphics g)
{
    g.drawImage(picture, 0, 25, this);
    this.update_1();
}
private void update_1()
{
  for(int i=0;i<this.getContentPane().getComponentCount();i++)
    {
        this.getContentPane().getComponent(i).update(this.getContentPane().getComponent(i).getGraphics());
    }
}
private void print_1()
{
    for(int i=0;i<this.getContentPane().getComponentCount();i++)
    {
        this.getContentPane().getComponent(i).repaint();
    }    
}
protected ArrayList<JLabel> menuLabel;//лист где хранятся надписи к меню
protected Image picture;//заставка
protected int indexMenuNew;//старое значение индекса меню
protected int indexMenuOld;//новое значение индекс меню
protected Point pointMunuLabel;//точка где распологаются надписи
protected Point pointMunuButton;//точка где начинается распологаться меню кнопок
protected ArrayList<ArrayList<JButton>> menuButton;//список где храниться меню кнопок
protected ArrayList<MusicalRecording> music;//список со всеми произведениями
protected ArrayList<MusicIndustryWorker> people;//список со всеми людьми


public static void main(String[] args)  
{
 java.awt.EventQueue.invokeLater(new Runnable() {
    public void run() {
        Menu dialog = new Menu();
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
        @Override
        public void windowClosing(java.awt.event.WindowEvent e) {
            System.exit(0);
        }
        });
        dialog.setVisible(true);
    }
    });

}
private void creationArrayListPeople(ArrayList<MusicIndustryWorker> people,ArrayList<MusicalRecording> music)
{
    boolean k;
    for(MusicalRecording v : music)
    {
        for(int i=0;i<v.sizeListSingers();i++)
        {
            k=false;
            for(MusicIndustryWorker t:people)
            {
                if(t.equalsMusicIndustryWorker(v.getSinger(i))==true)
                {
                    k=true;
                    break;
                }
            }
            if(k==false)
                people.add(v.getSinger(i));
        }
        
        for(int i=0;i<v.getSong().sizeListPoets();i++)
        {
            k=false;
            for(MusicIndustryWorker t:people)
            {
                if(t.equalsMusicIndustryWorker(v.getSong().getPoet(i))==true)
                {
                    k=true;
                    break;
                }
            }
            if(k==false)
                people.add(v.getSong().getPoet(i));
        }
        
        for(int i=0;i<v.getSong().sizeListComposers();i++)
        {
            k=false;
            for(MusicIndustryWorker t:people)
            {
                if(t.equalsMusicIndustryWorker(v.getSong().getComposer(i))==true)
                {
                    k=true;
                    break;
                }
            }
            if(k==false)
                people.add(v.getSong().getComposer(i));
        }
    }
}
private void writeArrayArrayListMusicalRecording(ArrayList<MusicalRecording> music)
{
    boolean a=false;
   File file;
    file=new File("system.txt");
    file.setWritable(true);
    try {
        
        DataOutputStream myfile = new DataOutputStream( new FileOutputStream("program/system.txt"));
        myfile.writeInt(music.size());
        for(MusicalRecording v:music)
        {
            v.writeFile(myfile);
        }
       myfile.close();
    }
    catch (FileNotFoundException ex) 
    {    
    } 
    catch (IOException ex) {
       a=true;
    }
    finally
    {
        file.setReadOnly();
    }
    if(a==true)
    {
        JOptionPane.showMessageDialog(null,"Внимание, при сохранение данных возникла ошибка! Часть данных  потеряна.","Ошибка",2);
    }
}
private void readArrayArrayListMusicalRecording(ArrayList<MusicalRecording> music)
{
    boolean a=false;
    try {
        DataInputStream myfile = new DataInputStream(new FileInputStream("program/system.txt"));
        int count=-1;
        count=myfile.readInt();
        if(count<0)
           throw new IOException("Error when reading data");
        MusicalRecording v;
        for(int i=0;i<count;i++)
        {
            v=new MusicalRecording();
            v.readFile(myfile);
            music.add(v);
        }
        myfile.close();
    } 
    catch (FileNotFoundException ex) {
    } 
    catch (IOException ex) {
        a=true;
    } 
    catch (IllegalArgumentException ex) {
        a=true;
    } 
    catch (ParseException ex) {
     a=true;
    }
    if(a==true)
    {
        JOptionPane.showMessageDialog(null,"Внимание, при загрузки данных возникла ошибка! Часть данных потеряна.","Ошибка",2);
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonChange;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonListComposers;
    private javax.swing.JButton jButtonListMusicalRecordings;
    private javax.swing.JButton jButtonListPopularMusic;
    private javax.swing.JButton jButtonListSingers;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonReference;
    private javax.swing.JLabel jLabelEditor;
    private javax.swing.JLabel jLabelReference;
    private javax.swing.JLabel jLabelreview;
    // End of variables declaration//GEN-END:variables
}
