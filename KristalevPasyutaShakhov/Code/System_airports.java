
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Данил
 */
public class System_airports extends javax.swing.JFrame {
    
    /**
     * Creates new form System_airports
     */
    GlobalVars global = GlobalVars.getGlobal();
    public System_airports() {
        initComponents();
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton24 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jButton26 = new javax.swing.JButton();
        jButton29 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Подготовка");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Самолет", "Стоянка"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton3.setText("Старт");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Самолет", "Максимальное", "Текущее", "Необходимое", "Пассажиры/груз", "Отправление", "Прибытие", "Тип самолета"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);

        jButton24.setText("Стоп");
        jButton24.setEnabled(false);
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Самолет"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Самолет"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTable5);

        jButton26.setText("+1");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });

        jButton29.setText("-1");
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });

        jLabel1.setText("Время");

        jLabel2.setText("Кол-во самолетов(шт)");

        jLabel3.setText("Кол-во самолетов в ангарах(шт)");

        jLabel4.setText("Кол-во самолетов в полете(шт)");

        jLabel5.setText("Кол-во разбившихся самолетов(шт)");

        jLabel6.setText("Людей доставленно(шт)");

        jLabel7.setText("Людей погибло(шт)");

        jLabel8.setText("Груза доставленно(кг)");

        jLabel9.setText("Груза потеренно(кг)");

        jLabel10.setText("0");

        jLabel11.setText("0");

        jLabel12.setText("0");

        jLabel13.setText("0");

        jLabel14.setText("0");

        jLabel15.setText("0");

        jLabel16.setText("0");

        jLabel17.setText("0");

        jLabel18.setText("Людей в полете(шт)");

        jLabel19.setText("0");

        jLabel20.setText("Груза в полете(кг)");

        jLabel21.setText("0");

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Аэропорт", "Тип аэропорта"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTable6);

        jLabel22.setText("Аэропорты");

        jLabel23.setText("Ангары");

        jLabel24.setText("Разбившиеся самолеты");

        jLabel25.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jLabel13)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel19)
                            .addComponent(jLabel21)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)))
                    .addComponent(jLabel18)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel22))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(6, 6, 6)
                                .addComponent(jButton3)
                                .addGap(6, 6, 6)
                                .addComponent(jButton24)
                                .addGap(403, 403, 403))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(14, 14, 14)
                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton29)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton3)
                            .addComponent(jButton24))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jButton26)
                                    .addComponent(jButton29)
                                    .addComponent(jLabel25))
                                .addGap(6, 6, 6)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel23)
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel24)
                                            .addGap(176, 176, 176))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGap(27, 27, 27)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel22)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel(); 
        int seed;
        java.util.Random rand = new java.util.Random();
        seed = Math.abs(rand.nextInt());
 
        global.count_airports = 5+seed % 5;
        
        global.city_airport = new String[global.count_airports];
        
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new FileReader("city.txt"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(System_airports.class.getName()).log(Level.SEVERE, null, ex);
        }
        String line;
        for(int i=0;i<global.count_airports;i++)
        {
            try {
                line = reader.readLine();
                global.city_airport[i] = line;
            } catch (IOException ex) {
                Logger.getLogger(System_airports.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        int hp=0;
        for(int i=0;i<global.count_airports;i++)
	{
            seed = Math.abs(rand.nextInt());
            switch(seed % 2)
            {
                    case 0: global.port = new Airport((5 + seed % 4),global.city_airport[i],(seed % 10),(seed % 15), i);
                            hp++;
                            break;
                    case 1: global.port = new Military_airport((5 + seed % 4),global.city_airport[i],(seed % 10),(seed % 15), i);
                            break;
            }
            global.port.angar = new ArrayList<Plane>(); 
            for (int j = 0; j < global.port.get_count_plane(); j++)
            {
                seed = Math.abs(rand.nextInt());
                global.number_plane = Integer.toString(100 + seed % 800) ;
                switch (seed % 6)
                {
                        case 0: global.name_airplane=global.TU + "_" + global.number_plane;
                                break;
                        case 1: global.name_airplane=global.Airbus + "_" + global.number_plane;
                                break;
                        case 2: global.name_airplane=global.Boing + "_" + global.number_plane;
                                break;
                        case 3: global.name_airplane=global.SU + "_" + global.number_plane;
                                break;
                        case 4: global.name_airplane=global.AN + "_" + global.number_plane;
                                break;
                        case 5: global.name_airplane=global.MIG + "_" + global.number_plane;
                                break;
                } 
                seed = Math.abs(rand.nextInt());
                int fl=0;
                if(hp>=2)
                    fl=3;
                else 
                    fl=1;
                switch (seed % fl)
                {
                        case 2: global.craft = new Transport(34000 + seed % 2000, 5 + seed % 10, 600 + seed % 200, 1 + seed % 5, global.name_airplane);//		
                                                        break;
                        case 1: global.craft = new Passenger(12000 + seed % 1000, 5 + seed % 13,800 +  seed % 200, 1 + seed % 5, global.name_airplane);//
                                                        break;
                        case 0: global.craft = new War(12000 + seed % 1000, 5 + seed % 13,800 +  seed % 200, 1 + seed % 5, global.name_airplane, 2 + seed % 5);//
                                                        break;
                }
                global.craft.set_stay_port(global.port.get_name_airport());
                global.craft.set_number_airport(global.port.get_number_airport());
                global.port.angar.add(global.craft);
                global.all_plane++;
                global.plane_in_port++;
            }
            global.Airports.add(global.port);
        }
        while(model.getRowCount() > 0)     model.removeRow(0);
        int k=0;         
        for (Airport airport : global.Airports) 
        {
                for (Plane plane : airport.angar)
                {   
                    model.addRow(new Object[]{plane.name_plane, plane.stay_port});
                }
                k+=airport.angar.size();
        }
        model.addRow(new Object[]{k});
        //
        int[] Airports_state;
        Airports_state = new int[global.count_airports];
        global.timer = new javax.swing.Timer( 1000, new ActionListener()
        {
                public void actionPerformed(ActionEvent e)
                {
                    int seed=0;
        for(int i=0;i<global.count_airports;i++)
        {
            Airports_state[i]=0;
        }
        
        if(global.Flights.isEmpty())
        {}
        else
        {
            //  увеличение текущего времени полета
            for(Plane i : global.Flights)
            {
                i.increase_current_time_flight();
            }
            for(Plane i : global.Flights)
            {
                if(Airports_state[i.get_number_airport()]==0)
                {
                    if(i.current_time_flight>=i.needful_time_flight && i.current_time_flight<=i.max_time_flight)
                    {
                        for(Airport j : global.Airports)
                        {
                            if(j.get_number_airport()==i.get_number_airport())
                            {
                                if(j.get_current_count_plane()<j.get_count_plane())
                                {
                                    Airports_state[i.get_number_airport()]=1;
                                    i.set_stay_port(j.get_name_airport());
                                    i.set_current_time_service();
                                    i.set_number_airport(j.get_number_airport());
                                    j.increase_count_plane();
                                    if (i instanceof Transport)
                                    {
                                        global.delivered_cargo+=((Transport)i).get_max_weight_load();
                                    }
                                    if (i instanceof Passenger)
                                    {
                                        global.flown_people+=((Passenger)i).get_count_passengers();
                                    }
                                    if (i instanceof War)
                                    {
                                        global.flown_people+=((War)i).get_count_team();
                                    }
                                    j.angar.add(i);
                                    global.Deleted.add(i);
                                }
                            }
                        }
                    }
                    if(i.current_time_flight>i.max_time_flight)
                    {
                        global.crash_plane++;
                        if (i instanceof Transport)
                        {
                            global.lost_cargo+=((Transport)i).get_max_weight_load();
                        }
                        if (i instanceof Passenger)
                        {
                            global.killed_people+=((Passenger)i).get_count_passengers();
                        }
                        if (i instanceof War)
                        {
                            global.killed_people+=((War)i).get_count_team();
                        }
                        global.Deleted.add(i);
                        global.Crashed_planes.add(i);
                    }
                }
            }
            for(Plane plane : global.Deleted)
            {
                global.Flights.remove(plane);
            }
            global.Deleted.clear();
        }
        //взлет
        for(Airport j : global.Airports)
        {
            for (Plane i : j.angar)
            {
                i.decrease_current_time_service();
            }
        }
        for(Airport j : global.Airports)
        {
            for (Plane i : j.angar)
            {
                if(Airports_state[i.get_number_airport()]==0 && i.ready_to_flight())
                {
                    global.Before_flights.add(i);
                    j.decrease_count_plane();
                    j.angar.remove(i);
                    break;
                }
            }
        }
        java.util.Random rand = new java.util.Random();
        int num;
        boolean help = false;
        for (Plane i : global.Before_flights)
        {
            do
            {    
                seed = Math.abs(rand.nextInt());
                num = seed % global.count_airports;
                if(i.get_military())
                {
                    help = true;
                }
                else
                {
                    for(Airport j : global.Airports)
                    {
                        if(j.get_number_airport() == num)
                        {
                            if(j.get_security())
                            {
                                help = false;
                            }
                            else
                            {
                                help = true;
                            }
                        }
                    }
                }
            }while(i.get_number_airport() == num  || help == false);
            for(Airport j : global.Airports)
            {
                if(j.get_number_airport() == i.get_number_airport())
                    global.stay_port = j;
                if(j.get_number_airport() == num)
                    global.arrival_port = j;
            }
            seed = Math.abs(rand.nextInt());
            if (i instanceof Transport)
            {
                ((Transport)i).set_max_weight_load(34000 + seed % 10000);
            }
            if (i instanceof Passenger)
            {
                ((Passenger)i).set_count_passengers(100 + seed % 100);
            }
            i.set_needful_time_flight(global.arrival_port.get_locationX(), global.arrival_port.get_locationY(), global.stay_port.get_locationX(), global.stay_port.get_locationY());
            i.set_arrival_port(global.arrival_port.get_name_airport());
            i.set_number_airport(global.arrival_port.get_number_airport());
            i.set_current_time_flight();
            global.Flights.add(i);
            global.Deleted.add(i);        
        }
        for(Plane plane : global.Deleted)
        {
            global.Before_flights.remove(plane);
        }
        global.Deleted.clear();
        int count_planes=0;
        for(Airport  j : global.Airports)
        {
            for (Plane i : j.angar)
            {
                count_planes++;
            }
        }
        global.plane_in_port=count_planes;
        int count_cargo=0;
        int count_people=0;
        int planes_in_flight=0;
        for (Plane i : global.Flights)
        {
            if (i instanceof Transport)
            {
                count_cargo+=((Transport)i).get_max_weight_load();
            }
            if (i instanceof Passenger)
            {
                count_people+=((Passenger)i).get_count_passengers();
            }
            if (i instanceof War)
            {
                count_people+=((War)i).get_count_team();
            }
            planes_in_flight++;
        }
        global.cargo_in_plane=count_cargo;
        global.people_in_plane=count_people;
        
        jLabel10.setText(Integer.toString(global.all_plane));
        jLabel13.setText(Integer.toString(global.crash_plane));
        jLabel14.setText(Integer.toString(global.flown_people));
        jLabel15.setText(Integer.toString(global.killed_people));
        jLabel16.setText(Integer.toString(global.delivered_cargo));
        jLabel17.setText(Integer.toString(global.lost_cargo));
        jLabel11.setText(Integer.toString(global.plane_in_port));
        jLabel19.setText(Integer.toString(global.people_in_plane));
        jLabel21.setText(Integer.toString(global.cargo_in_plane));
        jLabel12.setText(Integer.toString(planes_in_flight));
        
        DefaultTableModel model1 = (DefaultTableModel) jTable2.getModel(); 
        while (model1.getRowCount() > 0)  model1.removeRow(0);
        for (Plane plane : global.Flights)
        {   
            if (plane instanceof Transport)
            {
                model1.addRow(new Object[]{plane.name_plane, plane.max_time_flight, plane.current_time_flight, plane.needful_time_flight, ((Transport)plane).get_max_weight_load(), plane.stay_port, plane.arrival_port,"Civilian"});
            }
            if (plane instanceof Passenger)
            {
                model1.addRow(new Object[]{plane.name_plane, plane.max_time_flight, plane.current_time_flight, plane.needful_time_flight, ((Passenger)plane).get_count_passengers(), plane.stay_port, plane.arrival_port, "Civilian"});
            }
            if (plane instanceof War)
            {
                model1.addRow(new Object[]{plane.name_plane, plane.max_time_flight, plane.current_time_flight, plane.needful_time_flight, ((War)plane).get_count_team(), plane.stay_port, plane.arrival_port, "Military"});
            }
        }
        model1.addRow(new Object[]{global.Flights.size()});
        
        DefaultTableModel model2 = (DefaultTableModel) jTable3.getModel(); 
        while (model2.getRowCount() > 0)  model2.removeRow(0);
        for (Plane plane : global.Crashed_planes)
        {
             model2.addRow(new Object[]{plane.name_plane});
        }
        model2.addRow(new Object[]{global.Crashed_planes.size()});
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        while (model.getRowCount() > 0)  model.removeRow(0);
        int size=0;
        for (Airport port : global.Airports)
        {   
            for(Plane plane : port.angar)
            {
                model.addRow(new Object[]{plane.name_plane, plane.stay_port});
            }
            size+=port.get_current_count_plane();
        }
        model.addRow(new Object[]{size});
        
        DefaultTableModel model3 = (DefaultTableModel) jTable5.getModel();
        while (model3.getRowCount() > 0)  model3.removeRow(0);
        for(Plane plane : global.Flights)
        {
            if(plane.get_time_flight()<=global.search_time)
            {
                model3.addRow(new Object[]{plane.name_plane});
            }
        }
                }
        } );
        DefaultTableModel model4 = (DefaultTableModel) jTable6.getModel();
        while (model4.getRowCount() > 0)  model4.removeRow(0);
        for(Airport port : global.Airports)
        {
            if(port.get_security())
            {
                model4.addRow(new Object[]{port.name_airport,"Military"});
            }
            else
            {
                model4.addRow(new Object[]{port.name_airport,"Civilian"});
            }
        }
        jButton1.setEnabled(false);
        jButton3.setEnabled(true);       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        global.timer.start();
        jButton3.setEnabled(false);
        jButton24.setEnabled(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        global.timer.stop();
        jButton24.setEnabled(false);
        jButton3.setEnabled(true);
    }//GEN-LAST:event_jButton24ActionPerformed

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
        global.search_time++;
        jLabel25.setText(Integer.toString(global.search_time));
    }//GEN-LAST:event_jButton26ActionPerformed

    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed
        global.search_time--;
        jLabel25.setText(Integer.toString(global.search_time));
    }//GEN-LAST:event_jButton29ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(System_airports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(System_airports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(System_airports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(System_airports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new System_airports().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    // End of variables declaration//GEN-END:variables
}
